/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => CodeBlockSearchPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var CodeBlockSearchModal = class extends import_obsidian.Modal {
  constructor(app, onSearch) {
    super(app);
    this.onSearch = onSearch;
  }
  onOpen() {
    let { contentEl } = this;
    contentEl.createEl("h2", { text: "Search Code Blocks" });
    this.inputEl = contentEl.createEl("input", {
      type: "text",
      placeholder: "Enter search term..."
    });
    this.inputEl.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && this.inputEl.value.trim()) {
        e.preventDefault();
        this.onSearch(this.inputEl.value.trim());
        this.close();
      }
    });
    this.inputEl.focus();
  }
  onClose() {
    let { contentEl } = this;
    contentEl.empty();
  }
};
var CodeBlockSearchView = class extends import_obsidian.ItemView {
  constructor(leaf) {
    super(leaf);
  }
  getViewType() {
    return "codeblock-search-view";
  }
  getDisplayText() {
    return "Code Block Search Results";
  }
  async onOpen() {
    this.contentEl.createEl("h1", { text: "Search Results" });
  }
  async onClose() {
    this.contentEl.empty();
  }
};
var CodeBlockSearchPlugin = class extends import_obsidian.Plugin {
  onload() {
    this.registerView("codeblock-search-view", (leaf) => new CodeBlockSearchView(leaf));
    this.addCommand({
      id: "open-codeblock-search",
      name: "Search in Code Blocks",
      callback: () => {
        new CodeBlockSearchModal(this.app, this.handleSearch.bind(this)).open();
      }
    });
  }
  handleSearch(term) {
    let leaf = this.app.workspace.getLeaf(true);
    leaf.setViewState({
      type: "codeblock-search-view",
      state: {}
    }).then(() => {
      if (leaf.view instanceof CodeBlockSearchView) {
        this.performSearch(term, leaf.view);
      }
    });
  }
  performSearch(term, view) {
    const escapedTerm = term.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
    const codeBlockRegex = /```(?:[^`]|`[^`]|``[^`])*```/gs;
    view.contentEl.empty();
    let searches = this.app.vault.getMarkdownFiles().map(async (file) => {
      const fileContent = await this.app.vault.read(file);
      let foundInFile = false;
      const codeBlocks = fileContent.match(codeBlockRegex);
      if (codeBlocks) {
        codeBlocks.forEach((block) => {
          if (new RegExp(escapedTerm, "i").test(block)) {
            const codeBlock = document.createElement("pre");
            codeBlock.className = "code-block";
            const codeContent = document.createElement("code");
            codeContent.textContent = block.slice(3, -3);
            const copyBtn = document.createElement("button");
            copyBtn.textContent = "Copy";
            copyBtn.onclick = () => {
              navigator.clipboard.writeText(codeContent.textContent || "");
            };
            codeBlock.appendChild(codeContent);
            codeBlock.appendChild(copyBtn);
            view.contentEl.appendChild(codeBlock);
            foundInFile = true;
          }
        });
      }
      return foundInFile;
    });
    Promise.all(searches).then((results) => {
      const noMatchesAnywhere = results.every((found) => !found);
      if (noMatchesAnywhere) {
        const noResults = document.createElement("div");
        noResults.textContent = "No results found.";
        view.contentEl.appendChild(noResults);
      }
    });
  }
};
